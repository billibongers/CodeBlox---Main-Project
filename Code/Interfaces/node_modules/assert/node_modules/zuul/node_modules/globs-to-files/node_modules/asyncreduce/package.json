{
  "name": "asyncreduce",
  "version": "0.1.4",
  "description": "Reduce an array of values via an asynchronous function.",
  "main": "index.js",
  "scripts": {
    "test-main": "tap test/*.js",
    "test-0.8": "nave use 0.8 npm run test-main",
    "test-0.10": "nave use 0.10 npm run test-main",
    "test-all": "npm run test-main && npm run test-0.8 && npm run test-0.10 && npm run tape",
    "test": "if [ -e $TRAVIS ]; then npm run test-all; else npm run test-main; fi",
    "tape": "testling -x open",
    "tape-dev": "browserify --debug ./test/*.js > ./test/browser/bundle.js && open test/browser/index.html"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/asyncreduce.git"
  },
  "homepage": "https://github.com/thlorenz/asyncreduce",
  "dependencies": {
    "runnel": "~0.5.0"
  },
  "devDependencies": {
    "nave": "~0.4.3",
    "tape": "~1.0.4",
    "tap": "~0.4.3",
    "browserify": "~2.25.0",
    "testling": "~1.5.1"
  },
  "keywords": [
    "async",
    "reduce",
    "accumulate",
    "accumulator",
    "browser",
    "browserify",
    "iterate",
    "iterator",
    "initial"
  ],
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/thlorenz/asyncreduce/blob/master/LICENSE"
  },
  "engine": {
    "node": ">=0.6"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# asyncreduce [![build status](https://secure.travis-ci.org/thlorenz/asyncreduce.png)](http://travis-ci.org/thlorenz/asyncreduce)\n\n[![testling badge](https://ci.testling.com/thlorenz/asyncreduce.png)](https://ci.testling.com/thlorenz/asyncreduce)\n\nReduce an array of values via an asynchronous function.\n\n```js\nvar fs = require('fs');\nvar path = require('path');\nvar asyncReduce = require('asyncreduce');\n\nasyncReduce(\n    [ '.gitignore', '.jshintrc', '.travis.yml', 'index.js', 'Readme.md' ]\n  , {}\n  , function size (acc, file, cb) {\n      var p = path.join(__dirname, '..', file);\n\n      fs.stat(p, function (err, stat) {\n        if (err) return cb(err);\n\n        acc[file] = stat.size;\n        cb(null, acc);\n      });\n    }\n  , function done (err, acc) {\n      if (err) return console.error(err);\n      console.log('sizes:\\n', acc);\n    }\n);\n```\n\n```\nsizes:\n { '.gitignore': 97,\n  '.jshintrc': 249,\n  '.travis.yml': 48,\n  'index.js': 1534,\n  'Readme.md': 2160 }\n```\n\n## Features\n\n- super small library built on top of also quite small [runnel](https://github.com/thlorenz/runnel)\n- since runnel `try/catch`es and bubbles errors and reports with detailed stack traces, so does asyncreduce\n\n## Installation\n\n    npm install asyncreduce\n\n### In the browser\n\n#### With [browserify](https://github.com/substack/node-browserify)\n\nYou are all good.\n\n#### Without browserify\n\nTwo options:\n\n- run [browserify --standalone](https://github.com/substack/node-browserify#usage) after installing this package via\n  npm\n- download the [asyncreduce standalone version](http://wzrd.in.nyud.net/standalone/asyncreduce), powered by\n  [browserify as a service](http://wzrd.in.nyud.net)\n\n## API\n\n### *function asyncReduce (items, seed, iterator, done)*\n\n```\n/**\n * Calls provided async iterator function with the accumulator and each item.\n * When all items have been iterated over calls done with a possible error or the final value of the accumulator.\n *\n * @name exports\n * @function\n * @param items {Array} the items to be reduced\n * @param seed {T} the initial value that can be of any type and is passed along as the accumulator (acc) each time the iterator is called\n * @param iterator {Function} function (acc, item, callback) {} - the iterator called for each item\n * @param done {Function} function (err, acc) {} - called with final accumulated value or an error if one occurred\n */\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thlorenz/asyncreduce/issues"
  },
  "_id": "asyncreduce@0.1.4",
  "dist": {
    "shasum": "cd3a0f0288cf799b695fad0213dd35db5ad1c621"
  },
  "_from": "asyncreduce@~0.1.4",
  "_resolved": "https://registry.npmjs.org/asyncreduce/-/asyncreduce-0.1.4.tgz"
}
