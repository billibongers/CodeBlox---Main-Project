{
  "name": "bulk-require",
  "version": "0.2.1",
  "description": "require a whole directory of trees in bulk",
  "main": "index.js",
  "dependencies": {
    "glob": "~3.2.7"
  },
  "devDependencies": {
    "tape": "^2.13.2"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/bulk-require.git"
  },
  "homepage": "https://github.com/substack/bulk-require",
  "keywords": [
    "require",
    "bulk",
    "directory",
    "glob",
    "load",
    "include"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# bulk-require\n\nrequire a whole directory of trees in bulk\n\n[![build status](https://secure.travis-ci.org/substack/bulk-require.png)](http://travis-ci.org/substack/bulk-require)\n\n# example\n\n``` js\nvar bulk = require('bulk-require');\nvar sections = bulk(__dirname, [ 'data/**/*.js', 'render/*.js' ]);\nconsole.log(sections);\n```\n\nRunning this `glob.js` file in a directory with these contents:\n\n```\ndata/\n  cats/\n    index.js\n    meow/\n      x.js\n  dogs/\n    index.js\n    small/\n      yip.js\n    wolf/\n      doge.js\n  owners/\n    data.js\nglob.js\nrender/\n```\n\nGives this output:\n\n```\n{ data: \n   { cats: { [Function] index: [Circular], meow: [Object] },\n     dogs: { [Function] index: [Circular], small: [Object], wolf: [Object] },\n     owners: { data: [Object] } },\n  render: { x: { oneoneone: 111, twotwotwo: 222 } } }\n```\n\n## bound arguments\n\nYou can also bind arguments by passing in an array instead of a glob string.\n\nFor example, if all `**/data.js` files have exports that take a `db` argument,\nyou can bind the arguments in bulk:\n\ndata/owners/data.js:\n\n``` js\nexports.all = function (db) {\n    return db.createReadStream({ start: 'owner!', end: 'owner!\\uffff' });\n};\n\nexports.one = function (db, name, cb) {\n    db.get('owner!' + name, cb);\n};\n```\n\nIn this instance `data.js` has multiple individual exports but argument binding\nalso works if you export a single function with `module.exports=` assignment.\n\nNow you can just call `sections.owners.data.one()` without supplying the `db`:\n\n``` js\nvar level = require('level');\nvar db = level('/tmp/test.db');\nvar bulk = require('bulk-require');\n\nvar sections = bulk(__dirname + '/data', [\n    [ '**/data.js', db ],\n    '**/*.js'\n]);\nsections.owners.data.one('mr-jenkins', console.log);\n```\n\n```\nnull '{\"cats\":5,\"dogs\":3}'\n```\n\n# warning\n\nFor applications full of real-world trade-offs and messy business logic\norganized into `model/` and `view/` directories  this approach to loading\nmodules may be justified, but most of the time you should just use the regular\nkind of require.\n\nWhat you should absolutely never do is run this module from somewhere deep in\nyour codebase. It should be very close to the entry point of your application.\n\nSometimes it's OK to break the rules. Especially if you can get away with it.\nCaveat npmtor.\n\n# methods\n\n``` js\nvar bulk = require('bulk-require')\n```\n\n## var modules = bulk(basedir, globs, opts={})\n\nReturn a nested object `modules` by expanding the string or array of strings\n`globs` rooted at the directory `basedir`.\n\nEach file will be placed into the nested tree `modules` based on its filename\nwith respect to `basedir`. Each directory becomes a new nested object.\n\nFor each item in the `globs` array, if the item itself is an array, the glob\nstring will be treated as the first argument and the extra arguments will be\nbound to all the top-level function exports for files matching the glob pattern.\n\nIf there is an `index.js` module that exports a single function with\n`module.exports=`, all the sub-modules will be attached to the index reference\nand it will serve as the parent node at that tree level. \n\nYou can optionally pass in a custom `require` function with `opts.require`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install bulk-require\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/bulk-require/issues"
  },
  "_id": "bulk-require@0.2.1",
  "dist": {
    "shasum": "f118d7833118b0a1a20b465b136d9db513479d25"
  },
  "_from": "bulk-require@0.2.1",
  "_resolved": "https://registry.npmjs.org/bulk-require/-/bulk-require-0.2.1.tgz"
}
