{
  "name": "nave",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me"
  },
  "description": "Virtual Environments for Node",
  "version": "0.4.5",
  "preferGlobal": true,
  "bin": {
    "nave": "./nave.sh"
  },
  "LICENSE": "BSD",
  "contributors": [
    {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me"
    },
    {
      "name": "Kai Chen",
      "email": "kaichenxyz@gmail.com"
    },
    {
      "name": "Keita Haga",
      "email": "keitahaga@mail.com"
    },
    {
      "name": "Marco Rogers",
      "email": "marco.rogers@gmail.com"
    },
    {
      "name": "Tj Holowaychuk",
      "email": "tj@vision-media.ca"
    },
    {
      "name": "Will",
      "email": "w.elwood08@gmail.com"
    }
  ],
  "readme": "# nave\n\nVirtual Environments for Node\n\n## Installation\n\nIf you want a global `nave` command, you could install this thing with npm.\nBut that's not really necessary.  You can run the `nave.sh` shell script\nfrom here, or symlink it wherever you want.\n\n## Usage\n\n    Usage: nave <cmd>\n\n    Commands:\n\n    install <version>    Install the version passed (ex: 0.1.103)\n    use <version>        Enter a subshell where <version> is being used\n    use <ver> <program>  Enter a subshell, and run \"<program>\", then exit\n    use <name> <ver>     Create a named env, using the specified version.\n                         If the name already exists, but the version differs,\n                         then it will update the link.\n    usemain <version>    Install in /usr/local/bin (ie, use as your main nodejs)\n    clean <version>      Delete the source code for <version>\n    uninstall <version>  Delete the install for <version>\n    ls                   List versions currently installed\n    ls-remote            List remote node versions\n    ls-all               List remote and local node versions\n    latest               Show the most recent dist version\n    help                 Output help information\n\n    <version> can be the string \"latest\" to get the latest distribution.\n    <version> can be the string \"stable\" to get the latest stable version.\n\nThat's about it.  Enjoy.\n\nWhen you're done using a specific version of node, just exit the shell to return\nto where you were before using nave.\n\n## env vars\n\n* `$NAVE` The current shell.  Either a version, or a name and version.\n* `$NAVENAME` The name of the current shell.  Equal to `$NAVEVERSION` in\n  unnammed environments.\n* `$NAVEVERSION` The version of node that the current shell is pointing\n  to.  (This should comply with `node -v`.)\n* `$NAVELVL` The level of nesting in the subshell.\n* `$NAVE_DEBUG` Set to 1 to run nave in `bash -x` style.\n* `$NAVE_DIR` Set to the location where you'd like nave to do its\n  business.  Defaults to `~/.nave`.\n* `$NAVE_CONFIG` Set this to an array of arguments to pass to\n  `./configure`.  Defaults to `(\"--debug\")`.  (Note that parens are\n  required to supply multiple arguments.  I use `(\"--debug\"\n  \"--without-npm\")` on my own system, since I'm usually using nave to\n  test npm, so installing it in the subshell doesn't help much.)  This\n  can be set in the `~/.naverc` file, or in your normal\n  `~/.bash{rc,_profile}` files.\n* `$NAVE_JOBS` If set, this will be the number of jobs to run when\n  building node.  If this isn't set, it'll use the `$JOBS` env, then try\n  to guess a reasonable value based on the number of CPUs, then fall\n  back on 2 if `sysctl -n hw.ncpu` fails.\n\n## Compatibility\n\nPrior to version 0.2, nave would run programs as `node <program>`.\nHowever, this is somewhat more limiting, so was dropped.  If you prefer the\nold style, just prefix your command with `node`.\n\nNave requires bash.  It will probably never work on Windows, or other systems\nlack a native Bourne Again Shell.  Sorry.\n\nNave logins work with bash and zsh.  If your shell doesn't set the\n`BASH` environment variable, then nave assumes you're using zsh.  As\nsuch, strange archaic shells like sh, csh, tcsh, ksh, and the like will not\nwork.\n\n\n## Configuration\n\nNave will source `~/.naverc` on initialization of a new subshell, if it\nexists and is readable.\n\nYou may control the place where nave puts things by setting the\n`NAVE_DIR` environment variable.  However, note that this must be set\nsomewhere *other* than `~/.naverc`, since it needs to be set in the\n*parent* shell where the `nave` command is invoked.\n\nBy default, nave puts its stuff in `~/.nave/`.  If this directory does\nnot exist and cannot be created, then it will attempt to use the location\nof the nave.sh bash script itself.  If it cannot write to this location,\nthen it will exit with an error.\n\n## Credits\n\nnave borrows concepts, inspiration, and code from Tim Caswell's \"nvm\" and Kris\nKowal's \"sea\" programs.\n\nSea is really nice, but is very tied to Narwhal.  Also, it's a require.paths\nmanager, which nave is not.\n\nNvm is also really nice, but has to be sourced rather than being run, and\nthus is a little bit wonky for some use cases.  But it doesn't involve\nsubshells, which makes it better for some others.\n",
  "readmeFilename": "README.md",
  "_id": "nave@0.4.5",
  "_from": "nave@~0.4.4"
}
