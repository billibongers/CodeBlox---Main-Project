{
  "name": "standard",
  "description": "JavaScript Standard Style",
  "version": "6.0.8",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bin": {
    "standard": "./bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/feross/standard/issues"
  },
  "dependencies": {
    "eslint": "~2.2.0",
    "eslint-config-standard": "5.1.0",
    "eslint-config-standard-jsx": "1.1.1",
    "eslint-plugin-promise": "^1.0.8",
    "eslint-plugin-react": "^4.0.0",
    "eslint-plugin-standard": "^1.3.1",
    "standard-engine": "^3.3.0",
    "xtend": "^4.0.1"
  },
  "devDependencies": {
    "babel-eslint": "^5.0.0",
    "cross-spawn-async": "^2.1.8",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "run-parallel-limit": "^1.0.2",
    "standard-packages": "^3.0.5",
    "tape": "^4.4.0"
  },
  "homepage": "http://standardjs.com",
  "keywords": [
    "JavaScript Standard Style",
    "check",
    "checker",
    "code",
    "code checker",
    "code linter",
    "code standards",
    "code style",
    "enforce",
    "eslint",
    "hint",
    "jscs",
    "jshint",
    "lint",
    "policy",
    "quality",
    "simple",
    "standard",
    "standard style",
    "style",
    "style checker",
    "style linter",
    "verify"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/standard.git"
  },
  "scripts": {
    "test": "./bin/cmd.js --verbose && tape test/*.js",
    "test-disabled": "npm test -- --disabled",
    "test-offline": "npm test -- --offline",
    "test-offline-quick": "npm test -- --offline --quick",
    "test-quick": "npm test -- --quick"
  },
  "readme": "# JavaScript Standard Style\n[![travis][travis-image]][travis-url]\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n\n[travis-image]: https://travis-ci.org/feross/standard.svg?branch=master\n[travis-url]: https://travis-ci.org/feross/standard\n[npm-image]: https://img.shields.io/npm/v/standard.svg\n[npm-url]: https://npmjs.org/package/standard\n[downloads-image]: https://img.shields.io/npm/dm/standard.svg\n[downloads-url]: https://npmjs.org/package/standard\n\n### One Style to Rule Them All\n\nNo decisions to make. No `.eslintrc`, `.jshintrc`, or `.jscsrc` files to manage. It just\nworks.\n\nThis module saves you (and others!) time in two ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your project. Just\n  drop it in.\n- **Catch style errors before they're submitted in PRs.** Saves precious code review time\n  by eliminating back-and-forth between maintainer and contributor.\n\n## Install\n\n```bash\nnpm install standard\n```\n\n## Rules\n\n- **2 spaces** – for indentation\n- **Single quotes for strings** – except to avoid escaping\n- **No unused variables** – this one catches *tons* of bugs!\n- **No semicolons** – [It's][1] [fine.][2] [Really!][3]\n- **Never start a line with `(` or `[`**\n  - This is the **only** gotcha with omitting semicolons – *automatically checked for you!*\n  - [More details][4]\n- **Space after keywords** `if (condition) { ... }`\n- **Space after function name** `function name (arg) { ... }`\n- Always use `===` instead of `==` – but `obj == null` is allowed to check `null || undefined`.\n- Always handle the node.js `err` function parameter\n- Always prefix browser globals with `window` – except `document` and `navigator` are okay\n  - Prevents accidental use of poorly-named browser globals like `open`, `length`,\n    `event`, and `name`.\n- **And [more goodness][5]** – *give `standard` a try today!*\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://www.youtube.com/watch?v=gsfbh17Ax9I\n[4]: RULES.md#semicolons\n[5]: RULES.md#javascript-standard-style\n\nTo get a better idea, take a look at\n[a sample file](https://github.com/feross/bittorrent-dht/blob/master/client.js) written\nin JavaScript Standard Style, or check out some of\n[the repositories](https://github.com/feross/standard-packages/blob/master/all.json) that use\n`standard`.\n\n## Badge\n\nUse this in one of your projects? Include one of these badges in your readme to\nlet people know that your code is using the standard style.\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n```markdown\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n```\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n```markdown\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n```\n\n## Usage\n\nThe easiest way to use JavaScript Standard Style to check your code is to install it\nglobally as a Node command line program. To do so, simply run the following command in\nyour terminal (flag `-g` installs `standard` globally on your system, omit it if you want\nto install in the current working directory):\n\n```bash\nnpm install standard -g\n```\n\nAfter you've done that you should be able to use the `standard` program. The simplest use\ncase would be checking the style of all JavaScript files in the current working directory:\n\n```bash\n$ standard\nError: Use JavaScript Standard Style\n  lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n```\n\nYou can optionally pass in a directory using the glob pattern:\n\n```bash\n$ standard src/util/**/*.js\n```\n\n**Note:** by default `standard` will look for all files matching the patterns: `**/*.js`, `**/*.jsx`.\n\n### Text editor plugins\n\nFirst, install `standard`. Then, install the appropriate plugin for your editor:\n\n#### [Sublime Text](https://www.sublimetext.com/)\n\nUsing **[Package Control][sublime-1]**, install **[SublimeLinter][sublime-2]** and\n**[SublimeLinter-contrib-standard][sublime-3]**.\n\nFor automatic formatting on save, install **[StandardFormat][sublime-4]**.\n\n[sublime-1]: https://packagecontrol.io/\n[sublime-2]: http://www.sublimelinter.com/en/latest/\n[sublime-3]: https://packagecontrol.io/packages/SublimeLinter-contrib-standard\n[sublime-4]: https://packagecontrol.io/packages/StandardFormat\n\n#### [Atom](https://atom.io)\n\nInstall **[linter-js-standard][atom-1]**.\n\nFor automatic formatting, install **[standard-formatter][atom-2]**.\nFor snippets, install **[standardjs-snippets][atom-3]**.\n\n[atom-1]: https://atom.io/packages/linter-js-standard\n[atom-2]: https://atom.io/packages/standard-formatter\n[atom-3]: https://atom.io/packages/standardjs-snippets\n\n#### [Vim](http://www.vim.org/)\n\nInstall **[Syntastic][vim-1]** and add this line to `.vimrc`:\n\n```vim\nlet g:syntastic_javascript_checkers = ['standard']\n```\n\nFor automatic formatting on save, install [standard-format](https://github.com/maxogden/standard-format)\n\n```bash\nnpm install -g standard-format\n```\n\nand add these two lines to `.vimrc`:\n\n```vim\nautocmd bufwritepost *.js silent !standard-format -w %\nset autoread\n```\n\n[vim-1]: https://github.com/scrooloose/syntastic\n\n#### [Emacs](https://www.gnu.org/software/emacs/)\n\nInstall **[Flycheck][emacs-1]** and check out the **[manual][emacs-2]** to learn how to\nenable it in your projects.\n\n[emacs-1]: http://www.flycheck.org\n[emacs-2]: http://www.flycheck.org/manual/latest/index.html\n\n#### [Brackets](http://brackets.io/)\n\nSearch the extension registry for **[\"Standard Code Style\"][brackets-1]**.\n\n[brackets-1]: https://github.com/ishamf/brackets-standard/\n\n#### [Visual Studio Code](https://code.visualstudio.com/)\n\nInstall **[vscode-standardjs][vscode-1]**.\n\nFor automatic formatting, install **[vscode-standard-format][vscode-2]**.\n\n[vscode-1]: https://marketplace.visualstudio.com/items/chenxsan.vscode-standardjs\n[vscode-2]: https://marketplace.visualstudio.com/items/chenxsan.vscode-standard-format\n\n#### [WebStorm/PhpStorm][webstorm-1]\n\nBoth WebStorm and PhpStorm can be [configured for Standard Style][webstorm-2].\n\n[webstorm-1]: https://www.jetbrains.com/webstorm/\n[webstorm-2]: https://github.com/feross/standard/blob/master/docs/webstorm.md\n\n### What you might do if you're clever\n\n1. Add it to `package.json`\n\n  ```json\n  {\n    \"name\": \"my-cool-package\",\n    \"devDependencies\": {\n      \"standard\": \"^3.0.0\"\n    },\n    \"scripts\": {\n      \"test\": \"standard && node my-tests.js\"\n    }\n  }\n  ```\n\n2. Check style automatically when you run `npm test`\n\n  ```\n  $ npm test\n  Error: Use JavaScript Standard Style\n    lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n  ```\n\n3. Never give style feedback on a pull request again!\n\n## FAQ\n\n### Why would I use JavaScript Standard Style?\n\nThe beauty of JavaScript Standard Style is that it's simple. No one wants to maintain\nmultiple hundred-line style configuration files for every module/project they work on.\nEnough of this madness!\n\nThis module saves you time in two ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your project. Just\n  drop it in.\n- **Catch style errors before they're submitted in PRs.** Saves precious code review time\n  by eliminating back-and-forth between maintainer and contributor.\n\nAdopting `standard` style means ranking the importance of code clarity and community\nconventions higher than personal style. This might not make sense for 100% of projects and\ndevelopment cultures, however open source can be a hostile place for newbies. Setting up\nclear, automated contributor expectations makes a project healthier.\n\n### I disagree with rule X, can you change it?\n\nNo. The whole point of `standard` is to avoid [bikeshedding][bikeshedding] about\nstyle. There are lots of debates online about tabs vs. spaces, etc. that will never be\nresolved. These debates just distract from getting stuff done. At the end of the day you\nhave to 'just pick something', and that's the whole philosophy of `standard` -- its a\nbunch of sensible 'just pick something' opinions. Hopefully, users see the value in that\nover defending their own opinions.\n\n[bikeshedding]: https://www.freebsd.org/doc/en/books/faq/misc.html#bikeshed-painting\n\n### But this isn't a real web standard!\n\nOf course it's not! The style laid out here is not affiliated with any official web\nstandards groups, which is why this repo is called `feross/standard` and not\n`ECMA/standard`.\n\nThe word \"standard\" has more meanings than just \"web standard\" :-) For example:\n\n- This module helps hold our code to a high *standard of quality*.\n- This module ensures that new contributors follow some basic *style standards*.\n\n### Is there an automatic formatter?\n\nYes! you can install [Max Ogden][max]'s [`standard-format`][standard-format] module with `npm install -g standard-format`. \n\n `standard-format filename.js` will automatically fix most issues though some, like not handling errors in node-style callbacks, must be fixed manually.\n\n[max]: https://github.com/maxogden\n[standard-format]: https://github.com/maxogden/standard-format\n\n### How do I ignore files?\n\nThe paths `node_modules/**`, `*.min.js`, `bundle.js`, `coverage/**`, hidden files/folders\n(beginning with `.`), and all patterns in a project's root `.gitignore` file are\nautomatically ignored.\n\nSometimes you need to ignore additional folders or specific minified files. To do that, add\na `standard.ignore` property to `package.json`:\n\n```json\n\"standard\": {\n  \"ignore\": [\n    \"**/out/\",\n    \"/lib/select2/\",\n    \"/lib/ckeditor/\",\n    \"tmp.js\"\n  ]\n}\n```\n\n### How do I hide a certain warning?\n\nIn rare cases, you'll need to break a rule and hide the warning generated by `standard`.\n\nJavaScript Standard Style uses [`eslint`](http://eslint.org/) under-the-hood and you can\nhide warnings as you normally would if you used `eslint` directly.\n\nTo get verbose output (so you can find the particular rule name to ignore), run:\n\n```bash\n$ standard --verbose\nError: Use JavaScript Standard Style\n  routes/error.js:20:36: 'file' was used before it was defined. (no-use-before-define)\n```\n\nDisable **all rules** on a specific line:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line\n```\n\nOr, disable **only** the `\"no-use-before-define\"` rule:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line no-use-before-define\n```\n\nOr, disable the `\"no-use-before-define\"` rule for **multiple lines**:\n\n```js\n/*eslint-disable no-use-before-define */\n// offending code here...\n// offending code here...\n// offending code here...\n/*eslint-enable no-use-before-define */\n```\n\n### I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?\n\nSome packages (e.g. `mocha`) put their functions (e.g. `describe`, `it`) on the global\nobject (poor form!). Since these functions are not defined or `require`d anywhere in your\ncode, `standard` will warn that you're using a variable that is not defined (usually, this\nrule is really useful for catching typos!). But we want to disable it for these global\nvariables.\n\nTo let `standard` (as well as humans reading your code) know that certain variables are\nglobal in your code, add this to the top of your file:\n\n```\n/* global myVar1, myVar2 */\n```\n\nIf you have hundreds of files, adding comments to every file can be tedious. In these\ncases, you can add this to `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"globals\": [ \"myVar1\", \"myVar2\" ]\n  }\n}\n```\n\n### Can I use a custom JS parser for bleeding-edge ES6 or ES7 support?\n\n`standard` supports custom JS parsers. To use a custom parser, install it from npm\n(example: `npm install babel-eslint`) and add this to your `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"parser\": \"babel-eslint\"\n  }\n}\n```\n\nIf you're using `standard` globally (you installed it with `-g`), then you also need to\ninstall `babel-eslint` globally with `npm install babel-eslint -g`.\n\n### Can you make rule X configurable?\n\nNo. The point of `standard` is to save you time by picking reasonable rules so you can\nspend your time solving actual problems. If you really do want to configure hundreds of\neslint rules individually, you can always use `eslint` directly.\n\nIf you just want to tweak a couple rules, consider using\n[this shareable config](https://github.com/feross/eslint-config-standard) and layering\nyour changes on top.\n\nPro tip: Just use `standard` and move on. There are actual real problems that you could\nspend your time solving! :P\n\n### What about Web Workers?\n\nAdd this to the top of your files:\n\n```js\n/* eslint-env serviceworker */\n```\n\nThis lets `standard` (as well as humans reading your code) know that `self` is a global\nin web worker code.\n\n### What about Mocha, Jasmine, QUnit, etc?\n\nTo support mocha in your test files, add this to the beginning of your test files:\n\n```js\n/* eslint-env mocha */\n```\n\nWhere `mocha` can be one of `jasmine`, `qunit`, `phantomjs`, and so on. To see a full list,\ncheck ESLint's [specifying environments](http://eslint.org/docs/user-guide/configuring.html#specifying-environments)\ndocumentation. For a list of what globals are available for these environments, check\nthe [globals](https://github.com/sindresorhus/globals/blob/master/globals.json) npm module.\n\n### Is there a Git `pre-commit` hook?\n\nFunny you should ask!\n\n```sh\n#!/bin/sh\n# Ensure all javascript files staged for commit pass standard code style\ngit diff --name-only --cached --relative | grep '\\.js$' | xargs standard\nexit $?\n```\n\nAlternatively, [overcommit](https://github.com/brigade/overcommit) is a Git hook\nmanager that includes support for running `standard` as a Git pre-commit hook.\nTo enable this, add the following to your `.overcommit.yml` file:\n\n```yaml\nPreCommit:\n  Standard:\n    enabled: true\n```\n\n### How do I make the output all colorful and *pretty*?\n\nThe built-in output is simple and straightforward, but if you like shiny things,\ninstall [snazzy](https://www.npmjs.com/package/snazzy):\n\n```\nnpm install snazzy\n```\n\nAnd run:\n\n```bash\n$ standard --verbose | snazzy\n```\n\nThere's also [standard-tap](https://www.npmjs.com/package/standard-tap), [standard-json](https://www.npmjs.com/package/standard-json), and [standard-reporter](https://www.npmjs.com/package/standard-reporter)\n\n### I want to contribute to `standard`. What packages should I know about?\n\n- **[standard](https://github.com/feross/standard)** - this repo\n  - **[standard-engine](https://github.com/flet/standard-engine)** - cli engine for arbitrary eslint rules\n  - **[eslint-config-standard](https://github.com/feross/eslint-config-standard)** - eslint rules for standard\n  - **[eslint-plugin-standard](https://github.com/xjamundx/eslint-plugin-standard)** - custom eslint rules for standard (not part of eslint core)\n  - **[eslint](https://github.com/eslint/eslint)** - the linter that powers standard\n- **[standard-format](https://github.com/maxogden/standard-format)** - automatic code formatter\n- **[snazzy](https://github.com/feross/snazzy)** - pretty terminal output for standard\n- **[standard-www](https://github.com/feross/standard-www)** - code for http://standardjs.com\n- **[semistandard](https://github.com/Flet/semistandard)** - standard, with semicolons (if you must)\n\nThere are also many **[editor plugins](#text-editor-plugins)**, a list of\n**[npm packages that use `standard`](https://github.com/feross/standard-packages)**, and\nan awesome list of\n**[packages in the `standard` ecosystem](https://github.com/feross/awesome-standard)**.\n\n## Node.js API\n\n### `standard.lintText(text, [opts], callback)`\n\nLint the provided source `text` to enforce JavaScript Standard Style. An `opts` object may\nbe provided:\n\n```js\nvar opts = {\n  globals: [],  // global variables to declare\n  parser: ''    // custom js parser (e.g. babel-eslint)\n}\n```\n\nThe `callback` will be called with an `Error` and `results` object:\n\n```js\nvar results = {\n  results: [\n    {\n      filePath: '',\n      messages: [\n        { ruleId: '', message: '', line: 0, column: 0 }\n      ],\n      errorCount: 0,\n      warningCount: 0\n    }\n  ],\n  errorCount: 0,\n  warningCount: 0\n}\n```\n\n### `standard.lintFiles(files, [opts], callback)`\n\nLint the provided `files` globs. An `opts` object may be provided:\n\n```js\nvar opts = {\n  globals: [],  // global variables to declare\n  parser: '',   // custom js parser (e.g. babel-eslint)\n  ignore: [],   // file globs to ignore (has sane defaults)\n  cwd: ''       // current working directory (default: process.cwd())\n}\n```\n\nThe `callback` will be called with an `Error` and `results` object (same as above).\n\n## IRC channel\n\nJoin us in `#standard` on freenode.\n\n## License\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "standard@6.0.8",
  "dist": {
    "shasum": "455b77ccd12303b8fe2aad627957846e85d59479"
  },
  "_from": "standard@^6.0.8",
  "_resolved": "https://registry.npmjs.org/standard/-/standard-6.0.8.tgz"
}
