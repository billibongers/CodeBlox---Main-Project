//asserters.expresso.js

var asserters = require('../')
  , assert = require('assert')

var deleted_a = {a: true}
delete deleted_a.a

var a,b,c,d,e
var examples =
{ ok : {
    pass : [[1], [2], [-1], ['sadf'], [true], [[]], [{}]]
  , fail : [[0],[false],[null],[undefined]]
  }
  
, equal : {
    pass : [ [1,1], [2,2.0], [-1,-1], ['sadf','sadf'], [true,1]
           , [a = [], a], [b = {}, b]]
  , fail : [ [0,1], [[],[]] ]
  }
  
, isTypeof : {
    pass : [ [1, 'number']
           , [NaN, 'number']
           , ['', 'string']
           , [{}, 'object']
           , [null,'object']
           , [undefined, 'undefined'] ]
  , fail : [ [0, 'string'] ]
  }
  
, isString : {
    pass : [ ['uoeaueu'] ]
  , fail : [ [0], [/aoeuaoeu/], [{}], [[]], [true] ]
  }

, isNumber: {
    pass : [ [10], [0], [-1], [NaN], [-1.7976931348623157E+1030], , [1.7976931348623157E+1030] ]
  , fail : [ [/aoeuaoeu/], [{}], [[]], [true], [undefined] ]
  }
, isBoolean: {
    pass : [ [true], [false]]
  , fail : [ ['true'], ['false'], [0], [1], [null], [undefined] ]
  }
, isUndefined: {
    pass : [ [undefined]]
  , fail : [ ['true'], ['false'], [0], [1], [null], [true], [false] ]
  }
, isNull: {
    pass : [ [null]]
  , fail : [ ['true'], ['false'], [0], [1], [undefined], [true], [false] ]
  }
, isInstanceof : {
    pass : [ [{}, Object], [[], Object], [[], Array]
           , [new Error, Error], [function (){}, Function]]
  , fail : [ [{}, Array] ]
  }
, has : {// has basicially checks if expected is a sub tree of actual.
    pass : [ [{a: 1}, {a: 1}]
           , [{a: 1, b: 2}, {a: 1}]
           , [{a: 1}, {a: assert.ok}]  //also, it applies functions in expected 
           ]
  , fail : [ [{a: 1}, {a: 1, b: 2}]
           , [{a: 1}, {a: {}}] 
           , [{}, {a: {}}] 
           , [{a: false}, {a: assert.ok}] 
           ]
  }
, every : { 
    pass : [ [[1,2,3,4,5],assert.ok] ]
  , fail : [ [[1,2,3,4,5,false],assert.ok] ]
  }

, primitive : {
    pass : [ [1], [2], [3], ['sadgsdf'] [true], [false], [undefined] ]
  , fail : [ [null], [[]], [{}], [new Error], [function (){}] ]
  }
, complex : {
    pass : [ [null], [[]], [{}], [new Error], [function (){}] ]
  , fail : [ [1], [2], [3], ['sadgsdf'] [true], [false], [undefined] ]
  }
, isFunction : {
    pass : [ [function(){}], [Error], [({}).constructor] ]
  , fail : [ [1], [2], [3], ['sadgsdf'] [true], [false], [undefined] ]
  }
, matches : {
    pass : [ ['hello', /\w+/] , ['asdgsadg', /[a|s|d|g]+/] ]
  , fail : [ ['sgfg-', /^\w+$/] ]
  }
//like (actual,expected,{case:boolean,whitespace:bo