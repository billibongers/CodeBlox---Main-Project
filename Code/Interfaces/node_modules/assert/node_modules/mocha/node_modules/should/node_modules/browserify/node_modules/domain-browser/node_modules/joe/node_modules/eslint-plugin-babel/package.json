{
  "name": "eslint-plugin-babel",
  "version": "3.3.0",
  "description": "an eslint rule plugin companion to babel-eslint",
  "main": "index.js",
  "scripts": {
    "test": "mocha ./tests/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/babel/eslint-plugin-babel.git"
  },
  "keywords": [
    "babel",
    "eslint",
    "eslintplugin",
    "eslint-plugin",
    "babel-eslint"
  ],
  "author": {
    "name": "Jason Quense @monasticpanic"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/babel/eslint-plugin-babel/issues"
  },
  "homepage": "https://github.com/babel/eslint-plugin-babel#readme",
  "peerDependencies": {
    "eslint": ">=1.0.0"
  },
  "devDependencies": {
    "babel-eslint": "^4.0.7",
    "eslint": "^1.1.0",
    "is-my-json-valid": "^2.12.0",
    "mocha": "^2.2.5",
    "phantomjs": "^1.9.17"
  },
  "readme": "# eslint-plugin-babel\n\nAn `eslint` plugin companion to `babel-eslint`. `babel-eslint` does a great job at adapting `eslint`\nfor use with Babel, but it can't change the built in rules to support experimental features.\n`eslint-plugin-babel` re-implements problematic rules so they do not give false positives or negatives.\n\n### Install\n\n```sh\nnpm install eslint-plugin-babel -D\n```\n\nLoad the plugin in your `.eslintrc` file:\n\n```json\n{\n  \"plugins\": [\n    \"babel\"\n  ]\n}\n```\n\nFinally enable all the rules you would like to use (remember to disable the\noriginal ones as well!).\n\n```json\n{\n  \"rules\": {\n    \"babel/generator-star-spacing\": 1,\n    \"babel/new-cap\": 1,\n    \"babel/array-bracket-spacing\": 1,\n    \"babel/object-curly-spacing\": 1,\n    \"babel/object-shorthand\": 1,\n    \"babel/arrow-parens\": 1,\n    \"babel/no-await-in-loop\": 1,\n    \"babel/flow-object-type\": 1,\n    \"babel/func-params-comma-dangle\": 1\n  }\n}\n```\n### Rules\n\nEach rule corresponds to a core `eslint` rule, and has the same options.\n\nðŸ›  : means it's autofixable with `--fix`.\n\n- `babel/generator-star-spacing`: Handles async/await functions correctly\n- `babel/new-cap`: Ignores capitalized decorators (`@Decorator`)\n- `babel/array-bracket-spacing`: Handles destructuring arrays with flow type in function parameters (ðŸ›  )\n- `babel/object-curly-spacing`: doesn't complain about `export x from \"mod\";` or `export * as x from \"mod\";` (ðŸ›  )\n- `babel/object-shorthand`: doesn't fail when using object spread (`...obj`)\n- `babel/arrow-parens`: Handles async functions correctly (ðŸ›  )\n\nThe following rules are not in `eslint`, but are relevant only to syntax that is not specified by\nthe current JavaScript standard or supported by `eslint`.\n\n- `babel/no-await-in-loop`: guard against awaiting async functions inside of a loop\n- `babel/flow-object-type`: Require a particular separator between properties in Flow object types. (ðŸ›  )\n  - Use the option `semicolon` to require semicolons (e.g. `type Foo = { bar: number; baz: string }`).\n  - Use the option `comma` to require commas (e.g. `type Foo = { bar: number, baz: string }`).\n- `babel/func-params-comma-dangle`: Require or forbid trailing commas for function paramater lists. Behaves like, and takes the same options as, `eslint`'s [`comma-dangle`](http://eslint.org/docs/rules/comma-dangle). (ðŸ›  )\n",
  "readmeFilename": "README.md",
  "_id": "eslint-plugin-babel@3.3.0",
  "dist": {
    "shasum": "39e8a2d6524e9b19d57e291b9d192b6890f6e440"
  },
  "_from": "eslint-plugin-babel@^3.1.0",
  "_resolved": "https://registry.npmjs.org/eslint-plugin-babel/-/eslint-plugin-babel-3.3.0.tgz"
}
