{
  "name": "nodelint",
  "description": "The nodelint command line tool allows you to check for problems using JSLint. You can specify your own --config file to use alternate JSLint options and your own --reporter file if you want to customise the generated output.",
  "keywords": [
    "lint",
    "jslint",
    "nodelint",
    "code quality"
  ],
  "version": "0.6.2",
  "homepage": "https://github.com/tav/nodelint",
  "author": {
    "name": "tav",
    "email": "tav@espians.com",
    "url": "https://tav.espians.com"
  },
  "maintainers": [
    {
      "name": "tav",
      "email": "tav@espians.com"
    },
    {
      "name": "cliffano",
      "email": "cliffano@gmail.com"
    },
    {
      "name": "Sannis",
      "email": "efimovov@gmail.com"
    }
  ],
  "contributors": [
    {
      "name": "Matthew Kitt",
      "email": "mk.kitt@gmail.com",
      "url": "https://github.com/mkitt"
    },
    {
      "name": "Oleg Efimov",
      "email": "efimovov@gmail.com",
      "url": "https://github.com/Sannis"
    },
    {
      "name": "Corey Hart",
      "email": "corey@codenothing.com",
      "url": "http://www.codenothing.com"
    },
    {
      "name": "Cliffano Subagio",
      "email": "cliffano@gmail.com",
      "url": "http://blog.cliffano.com"
    },
    {
      "name": "Mamading Ceesay",
      "email": "mamading@gmail.com",
      "url": "https://github.com/evangineer"
    },
    {
      "name": "Matt Ranney",
      "email": "mjr@ranney.com",
      "url": "https://github.com/mranney"
    },
    {
      "name": "Felix Geisendörfer",
      "url": "http://debuggable.com"
    },
    {
      "name": "Nathan Landis",
      "url": "https://github.com/my8bird"
    },
    {
      "name": "Clemens Akens",
      "url": "https://github.com/clebert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tav/nodelint.git"
  },
  "bugs": {
    "url": "https://github.com/tav/nodelint/issues"
  },
  "bin": {
    "nodelint": "./nodelint"
  },
  "directories": {
    "doc": "./doc",
    "man": "./man1"
  },
  "dependencies": {
    "file": ">=0.2.0"
  },
  "devDependencies": {
    "nodeunit": ">=0.6.2",
    "ronn": ">=0.3.7"
  },
  "engines": {
    "node": ">=0.4"
  },
  "scripts": {
    "test": "make test",
    "prepublish": "make doc"
  },
  "licenses": {
    "type": "Public Domain"
  },
  "man": [
    "/home/billibongers/.npm/nodelint/0.6.2/package/man1/nodelint.1"
  ],
  "readme": "nodelint\n--------\n\n- [Node.js] is a [V8] based framework for writing Javascript applications outside\n  the browser.\n\n- [JSLint] is a code quality tool that checks for problems in Javascript programs.\n\n- **nodelint** lets you run JSLint from the command line.\n\n- nodelint currently supports node version 0.4.x and tested with 0.5.9 so should run on 0.6.x\n\n[Node.js]: http://nodejs.org/\n[V8]: http://code.google.com/p/v8/\n[JSLint]: https://github.com/douglascrockford/JSLint\n\n\ninstallation\n------------\n\nnpm:\n\n    $ npm install nodelint\n\n\nIf you clone nodelint from Github, you should init JSLint submodule:\n\n    $ git submodule update --init\n\n\nusage\n-----\n\nYou can use `nodelint` directly if you have `node` in your $PATH,\nor if you installed it using `npm -g`:\n\n    $ nodelint path/to/your/file.js\n\nOtherwise, you need to run it with node:\n\n    $ node path/to/nodelint path/to/your/file.js\n\nYou can also specify a directory param and nodelint will find all .js files under that directory and its subdirectories:\n\n    $ node path/to/nodelint dir1/ dir2/\n\nEnjoy!\n\n\nconfiguration\n-------------\n\nYou can override default JSLint options by passing config file with the optional `--config` parameter:\n\n    $ nodelint file1 file2 dir1 dir2 --config path/to/your/config/file.js\n\nFor example, if the default config.js has:\n\n    var options = {\n        adsafe       : false,\n        bitwise      : true,\n        ...\n        \"predef\"     : []\n    };\n\nAnd your own path/to/your/config/file.js looks like:\n\n    var options = {\n        bitwise      : false,\n        browser      : false\n    };\n\nThen the final options used will be:\n\n    var options = {\n        adsafe       : false,\n        bitwise      : false,\n        browser      : false,\n        ...\n        \"predef\"     : []\n    };\n\nTake a look at [JSLint's options] to see what to put in the `options` variable.\n\n[JSLint's options]: http://www.jslint.com/lint.html#options\n\nYou can also add your configuration inside the JS files itself:\nJSLint will use this one instead of the global one.\n\nSimply add some comments at the beginning of the file.\nNote that there is no space between /* and global and between /* and jslint:\n\n    // define your global objects:\n    /*global YUI, JQuery */\n\n    // define your jslint-options:\n    /*jslint white: true, onevar: true, undef: true, nomen: true */\n\n\nreporters\n---------\n\nBy default nodelint uses an internal `reporter` to output it's results to the console.\nThere may be times when a more customizable reporting system might be needed\n(*i.e. IDE/Text Editor integrations or customized console outputs*).\n\n`nodelint` allows you to designate a custom reporter for outputting the results\nfrom JSLint's run. This `reporter` will override the default one\nbuilt into nodelint. To utilize a custom reporter first create a js file that\nexports `reporter` function:\n\n`example-reporter.js`:\n\n    var util = require('util');\n\n    function report(results) {\n        var len = results.length;\n        util.puts(len + ' error' + ((len === 1) ? '' : 's'));\n    }\n\n    export.report = report;\n\nThen when you run nodelint from the command line, pass in the customized\nreporter:\n\n`$ ./nodelint path/to/file.js --reporter path/to/file/example-reporter.js`\n\nFor brevity sake, this is a fairly simple reporter.\n\n`nodelint` includes some build-in reportes for VIM, Textmate and JetBrains IDEA integration.\n\nAlso it include XML reporter, that produces reports which can\nalso be integrated with a Continuous Integration server like [Hudson] using the\n[Violations Plugin].\n\nPlease see the [wiki][wiki] for integration with various editors.\n\n[Hudson]: http://hudson-ci.org\n[Violations Plugin]: http://wiki.hudson-ci.org/display/HUDSON/Violations\n\n\ncontribute\n----------\n\nTo contribute any patches, simply fork this repository using GitHub and send a\npull request to me <<http://github.com/tav>>. Thanks!\n\n\ncredits\n-------\n\n- [tav], wrote nodelint\n\n- [Felix Geisendörfer][felixge], clarified Node.js specific details\n\n- [Douglas Crockford], wrote the original JSLint and rhino.js runner\n\n- [Nathan Landis][my8bird], updated nodelint to Node's new API.\n\n- [Oleg Efimov][Sannis], added support for overridable configurations, running\n  nodelint from a symlink and updates to reflect Node.js API changes.\n\n- [Matthew Kitt][mkitt], added support for configurable reporters, various code\n  cleanups and improvements including updates to reflect Node.js API changes.\n\n- [Corey Hart], updated nodelint with multiple files and config support.\n\n- [Mamading Ceesay][evangineer], added support for using nodelint within Emacs.\n\n- [Matt Ranney][mranney], updated nodelint to use sys.error.\n\n- [Cliffano Subagio], added npm installation support, XML reporter, and directory param support.\n\n- [Clemens Akens], updated to latest JSLint from Crockford repo\n\n- [Paul Armstrong], updates to reflect Node.js and npm API changes\n\n[tav]: http://tav.espians.com\n[felixge]: http://debuggable.com\n[Douglas Crockford]: http://www.crockford.com\n[my8bird]: http://github.com/my8bird\n[Sannis]: http://github.com/Sannis\n[mkitt]: http://github.com/mkitt\n[Corey Hart]: http://www.codenothing.com\n[evangineer]: http://github.com/evangineer\n[mranney]: http://github.com/mranney\n[Cliffano Subagio]: http://blog.cliffano.com\n[Clemens Akens]: https://github.com/clebert\n[Paul Armstrong]: https://github.com/paularmstrong\n",
  "readmeFilename": "README.md",
  "_id": "nodelint@0.6.2",
  "_from": "nodelint@>0.0.0"
}
