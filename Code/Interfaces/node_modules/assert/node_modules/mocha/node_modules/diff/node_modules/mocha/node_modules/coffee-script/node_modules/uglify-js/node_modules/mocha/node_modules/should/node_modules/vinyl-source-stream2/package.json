{
  "name": "vinyl-source-stream2",
  "description": "Use conventional text streams at the start of your gulp or vinyl pipelines",
  "version": "0.1.1",
  "main": "index.js",
  "browser": "index.js",
  "dependencies": {
    "vinyl": "~0.2.3",
    "through2": "~0.4.1"
  },
  "devDependencies": {
    "tape": "~2.12.3",
    "vinyl-map": "1.0.1",
    "gulp-rename": "~1.2.0",
    "gulp": "~3.6.0"
  },
  "scripts": {},
  "author": {
    "name": "Denis Bardadym",
    "email": "bardadymchik@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/btd/vinyl-source-stream"
  },
  "bugs": {
    "url": "https://github.com/btd/vinyl-source-stream/issues"
  },
  "homepage": "https://github.com/btd/vinyl-source-stream",
  "keywords": [
    "vinyl",
    "gulp",
    "gulpfriendly",
    "vanilla",
    "stream",
    "string",
    "text",
    "classic"
  ],
  "readme": "# vinyl-source-stream2\n\nThis is a patched `vinyl-source-stream` (thanks his author for original work). Original module does not work for me too good and author does not anwser in issues.\n\n## Usage ##\n\nOur previous example, browserify, has a streaming API for its output bundles\nwhich you can use directly. This module is just a bridge that makes it\nsimple to use conventional text streams such as this in combination with gulp.\nHere's an example of using `vinyl-source-stream` and `browserify`, compared to\nusing `gulpify`:\n\n``` javascript\nvar source = require('vinyl-source-stream2')\nvar browserify = require('browserify')\nvar uglify = require('gulp-uglify')\nvar gulp = require('gulp')\n\n// using vinyl-source-stream:\ngulp.task('browserify', function() {\n  var bundleStream = browserify('index.js').bundle()\n\n  bundleStream\n    .pipe(source('index.js'))\n    .pipe(uglify())//you do not need streamify because content will be buffer\n    .pipe(gulp.dest('./bundle.js'))\n})\n```\n\nNot all that different, really! The nice thing here is that you're getting the\nup-to-date browserify API and don't have to worry about the plugin's available\nfunctionality. Of course, these same benefits apply for any readable text\nstream you can find on npm.\n\n## API ##\n\n### `stream = sourceStream(filename|opts)` ###\n\n`filename` will be used to create stream which return file with path 'path' and content buffer, base will be set to path.dirname('path')\n\n`opts` it is all arguments you can pass to vinyl (path, cwd, base).\nalso exists option `buffer` which combine input stream to one buffer (default to true) and if false content of vinyl will be stream as it was in original module\n\n\n## License ##\n\nMIT. See [LICENSE.md](http://github.com/btd/vinyl-source-stream2/blob/master/LICENSE.md) for details.\nBased on [vinyl-source-stream](https://github.com/hughsk/vinyl-source-stream) which is also MIT licensed.\n",
  "readmeFilename": "README.md",
  "_id": "vinyl-source-stream2@0.1.1",
  "_from": "vinyl-source-stream2@^0.1.1"
}
