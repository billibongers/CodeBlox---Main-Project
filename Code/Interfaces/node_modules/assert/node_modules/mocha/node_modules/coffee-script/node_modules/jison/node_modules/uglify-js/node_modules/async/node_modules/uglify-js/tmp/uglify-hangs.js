/** 
 * @fileoverview 
 *
 * JsWorld
 *
 * <p>Javascript library for localised formatting and parsing of:
 *    <ul>
 *        <li>Numbers
 *        <li>Dates and times
 *        <li>Currency
 *    </ul>
 *
 * <p>The library classes are configured with standard POSIX locale definitions
 * derived from Unicode's Common Locale Data Repository (CLDR).
 *
 * <p>Website: <a href="http://software.dzhuvinov.com/jsworld.html">JsWorld</a>
 *
 * @author Vladimir Dzhuvinov
 * @version 2.5 (2011-12-23)
 */



/** 
 * @namespace Namespace container for the JsWorld library objects.
 */
jsworld = {};


/** 
 * @function
 * 
 * @description Formats a JavaScript Date object as an ISO-8601 date/time 
 * string.
 *
 * @param {Date} [d] A valid JavaScript Date object. If undefined the 
 *        current date/time will be used.
 * @param {Boolean} [withTZ] Include timezone offset, default false.
 *
 * @returns {String} The date/time formatted as YYYY-MM-DD HH:MM:SS.
 */
jsworld.formatIsoDateTime = function(d, withTZ) {

	if (typeof d === "undefined")
		d = new Date(); // now
	
	if (typeof withTZ === "undefined")
		withTZ = false;
	
	var s = jsworld.formatIsoDate(d) + " " + jsworld.formatIsoTime(d);
	
	if (withTZ) {
	
		var diff = d.getHours() - d.getUTCHours();
		var hourDiff = Math.abs(diff);
		
		var minuteUTC = d.getUTCMinutes();
		var minute = d.getMinutes();
		
		if (minute != minuteUTC && minuteUTC < 30 && diff < 0)
			hourDiff--;
			
		if (minute != minuteUTC && minuteUTC > 30 && diff > 0)
			hourDiff--;
		
		var minuteDiff;
		if (minute != minuteUTC)
			minuteDiff = ":30";
		else
			minuteDiff = ":00";
		
		var timezone;
		if (hourDiff < 10)
			timezone = "0" + hourDiff + minuteDiff;
		
		else
			timezone = "" + hourDiff + minuteDiff;

		if (diff < 0)
			timezone = "-" + timezone;
		
		else
			timezone = "+" + timezone;
		
		s = s + timezone;
	}
	
	return s;
};


/** 
 * @function
 * 
 * @description Formats a JavaScript Date object as an ISO-8601 date string.
 *
 * @param {Date} [d] A valid JavaScript Date object. If undefined the current 
 *        date will be used.
 *
 * @returns {String} The date formatted as YYYY-MM-DD.
 */
jsworld.formatIsoDate = function(d) {

	if (typeof d === "undefined")
		d = new Date(); // now
	
	var year = d.getFullYear();
	var month = d.getMonth() + 1;
	var day = d.getDate();
	
	return year + "-" + jsworld._zeroPad(month, 2) + "-" + jsworld._zeroPad(day, 2);
};


/** 
 * @function
 * 
 * @description Formats a JavaScript Date object as an ISO-8601 time string.
 *
 * @param {Date} [d] A valid JavaScript Date object. If undefined the current 
 *        time will be used.
 *
 * @returns {String} The time formatted as HH:MM:SS.
 */
jsworld.formatIsoTime = function(d) {

	if (typeof d === "undefined")
		d = new Date(); // now
	
	var hour = d.getHours();
	var minute = d.getMinutes();
	var second = d.getSeconds();
	
	return jsworld._zeroPad(hour, 2) + ":" + jsworld._zeroPad(minute, 2) + ":" + jsworld._zeroPad(second, 2);
};


/** 
 * @function
 * 
 * @description Parses an ISO-8601 formatted date/time string to a JavaScript 
 * Date object.
 *
 * @param {String} isoDateTimeVal An ISO-8601 formatted date/time string.
 *
 * <p>Accepted formats:
 *
 * <ul>
 *     <li>YYYY-MM-DD HH:MM:SS
 *     <li>YYYYMMDD HHMMSS
 *     <li>YYYY-MM-DD HHMMSS
 *     <li>YYYYMMDD HH:MM:SS
 * </ul>
 *
 * @returns {Date} The corresponding Date object.
 *
 * @throws Error on a badly formatted date/time string or on a invalid date.
 */
jsworld.parseIsoDateTime = function(isoDateTimeVal) {

	if (typeof isoDateTimeVal != "string")
		throw "Error: The parameter must be a string";

	// First, try to match "YYYY-MM-DD HH:MM:SS" format
	var matches = isoDateTimeVal.match(/^(\d\d\d\d)-(\d\d)-(\d\d)[T ](\d\d):(\d\d):(\d\d)/);
	
	// If unsuccessful, try to match "YYYYMMDD HHMMSS" format
	if (matches === null)
		matches = isoDateTimeVal.match(/^(\d\d\d\d)(\d\d)(\d\d)[T ](\d\d)(\d\d)(\d\d)/);
		
	// ... try to match "YYYY-MM-DD HHMMSS" format
	if (matches === null)
		matches = isoDateTimeVal.match(/^(\d\d\d\d)-(\d\d)-(\d\d)[T ](\d\d)(\d\d)(\d\d)/);
	
	// ... try to match "YYYYMMDD HH:MM:SS" format
	if (matches === null)
		matches = isoDateTimeVal.match(/^(\d\d\d\d)-(\d\d)-(\d\d)[T ](\d\d):(\d\d):(\d\d)/);

	// Report bad date/time string
	if (matches === null)
		throw "Error: Invalid ISO-8601 date/time string";

	// Force base 10 parse int as some values may have leading zeros!
	// (to avoid implicit octal base conversion)
	var year = parseInt(matches[1], 10);
	var month = parseInt(matches[2], 10);
	var day = parseInt(matches[3], 10);
	
	var hour = parseInt(matches[4], 10);
	var mins = parseInt(matches[5], 10);
	var secs = parseInt(matches[6], 10);
	
	// Simple value range check, leap years not checked
	// Note: the originial ISO time spec for leap hours (24:00:00) and seconds (00:00:60) is not supported
	if (month < 1 || month > 12 ||
	    day   < 1 || day   > 31 ||
	    hour  < 0 || hour  > 23 ||
	    mins  < 0 || mins  > 59 ||
	    secs  < 0 || secs  > 59    )
	    
		throw "Error: Invalid ISO-8601 date/time value";

	var d = new Date(year, month - 1, day, hour, mins, secs);
	
	// Check if the input date was valid 
	// (JS Date does automatic forward correction)
	if (d.getDate() != day || d.getMonth() +1 != month)
		throw "Error: Invalid date";
	
	return d;
};


/** 
 * @function
 * 
 * @description Parses an ISO-8601 formatted date string to a JavaScript 
 * Date object.
 *
 * @param {String} isoDateVal An ISO-8601 formatted date string.
 *
 * <p>Accepted formats:
 *
 * <ul>
 *     <li>YYYY-MM-DD
 *     <li>YYYYMMDD
 * </ul>
 *
 * @returns {Date} The corresponding Date object.
 *
 * @throws Error on a badly formatted date string or on a invalid date.
 */
jsworld.parseIsoDate = function(isoDateVal) {

	if (typeof isoDateVal != "string")
		throw "Error: The parameter must be a string";

	// First, try to match "YYYY-MM-DD" format
	var matches = isoDateVal.match(/^(\d\d\d\d)-(\d\d)-(\d\d)/);
	
	// If unsuccessful, try to match "YYYYMMDD" format
	if (matches === null)
		matches = isoDateVal.match(/^(\d\d\d\d)(\d\d)(\d\d)/);

	// Report bad date/time string
	if (matches === null)
		throw "Error: Invalid ISO-8601 date string";

	// Force base 10 parse int as some values may have leading zeros!
	// (to avoid implicit octal base conversion)
	var year = parseInt(matches[1], 10);
	var month = parseInt(matches[2], 10);
	var day = parseInt(matches[3], 10);
	
	// Simple value range check, leap years not checked
	if (month < 1 || month > 12 ||
	    day   < 1 || day   > 31    )
	    
		throw "Error: Invalid ISO-8601 date value";

	var d = new Date(year, month - 1, day);
	
	// Check if the input date was valid 
	// (JS Date does automatic forward correction)
	if (d.getDate() != day || d.getMonth() +1 != month)
		throw "Error: Invalid date";
	
	return d;
};


/** 
 * @function
 * 
 * @description Parses an ISO-8601 formatted time string to a JavaScript 
 * Date object.
 *
 * @param {String} isoTimeVal An ISO-8601 formatted time string.
 *
 * <p>Accepted formats:
 *
 * <ul>
 *     <li>HH:MM:SS
 *     <li>HHMMSS
 * </ul>
 *
 * @returns {Date} The corresponding Date object, with year, month and day set
 *          to zero.
 *
 * @throws Error on a badly formatted time string.
 */
jsworld.parseIsoTime = function(isoTimeVal) {

	if (typeof isoTimeVal != "string")
		throw "Error: The parameter must be a string";

	// First, try to match "HH:MM:SS" format
	var matches = isoTimeVal.match(/^(\d\d):(\d\d):(\d\d)/);
	
	// If unsuccessful, try to match "HHMMSS" format
	if (matches === null)
		matches = isoTimeVal.match(/^(\d\d)(\d\d)(\d\d)/);
	
	// Report bad date/time string
	if (matches === null)
		throw "Error: Invalid ISO-8601 date/time string";

	// Force base 10 parse int as some values may have leading zeros!
	// (to avoid implicit octal base conversion)
	var hour = parseInt(matches[1], 10);
	var mins = parseInt(matches[2], 10);
	var secs = parseInt(matches[3], 10);
	
	// Simple value range check, leap years not checked
	if (hour < 0 || hour > 23 ||
	    mins < 0 || mins > 59 ||
	    secs < 0 || secs > 59    )
	    
		throw "Error: Invalid ISO-8601 time value";

	return new Date(0, 0, 0, hour, mins, secs);
};


/**
 * @private
 *
 * @description Trims leading and trailing whitespace from a string.
 *
 * <p>Used non-regexp the method from http://blog.stevenlevithan.com/archives/faster-trim-javascript
 *
 * @param {String} str The string to trim.
 *
 * @returns {String} The trimmed string.
 */
jsworld._trim = function(str) {

	var whitespace = ' \n\r\t\f\x0b\xa0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000';
	
	for (var i = 0; i < str.length; i++) {
	
		if (whitespace.indexOf(str.charAt(i)) === -1) {
			str = str.substring(i);
			break;
		}
	}
	
	for (i = str.length - 1; i >= 0; i--) {
		if (whitespace.indexOf(str.charAt(i)) === -1) {
			str = str.substring(0, i + 1);
			break;
		}
	}
	
	return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';
};



/**
 * @private
 *
 * @description Returns true if the argument represents a decimal number.
 *
 * @param {Number|String} arg The argument to test.
 *
 * @returns {Boolean} true if the argument represents a decimal number, 
 *          otherwise false.
 */
jsworld._isNumber = function(arg) {

	if (typeof arg == "number")
		return true;
	
	if (typeof arg != "string")
		return false;
	
	// ensure string
	var s = arg + "";
	
	return (/^-?(\d+|\d*\.\d+)$/).test(s);
};


/**
 * @private
 *
 * @description Returns true if the argument represents a decimal integer.
 *
 * @param {Number|String} arg The argument to test.
 *
 * @returns {Boolean} true if the argument represents an integer, otherwise 
 * 