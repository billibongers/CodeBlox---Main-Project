var fs = require("fs"),
    assert = require("assert"),
    parser = require("../lib/jsonlint").parser;

exports["test object"] = function () {
    var json = '{"foo": "bar"}';
    assert.deepEqual(parser.parse(json), {"foo": "bar"});
};

exports["test escaped backslash"] = function () {
    var json = '{"foo": "\\\\"}';
    assert.deepEqual(parser.parse(json), {"foo": "\\"});
};

exports["test escaped chars"] = function () {
    var json = '{"foo": "\\\\\\\""}';
    assert.deepEqual(parser.parse(json), {"foo": '\\\"'});
};

exports["test escaped \\n"] = function () {
    var json = '{"foo": "\\\\\\n"}';
    assert.deepEqual(parser.parse(json), {"foo": '\\\n'});
};

exports["test string with escaped line break"] = function () {
    var json = '{"foo": "bar\\nbar"}';
    assert.deepEqual(parser.parse(json), {"foo": "bar\nbar"});
    assert.equal(JSON.stringify(parser.parse(json)).length, 18);
};

exports["test string with line break"] = function () {
    var json = '{"foo": "bar\nbar"}';
    assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test string literal"] = function () {
    var json = '"foo"';
    assert.equal(parser.parse(json), "foo");
};

exports["test number literal"] = function () {
    var json = '1234';
    assert.equal(parser.parse(json), 1234);
};

exports["test null literal"] = function () {
    var json = '1234';
    assert.equal(parser.parse(json), 1234);
};

exports["test boolean literal"] = function () {
    var json = 'true';
    assert.equal(parser.parse(json), true);
};

exports["test unclosed array"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/2.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test unquotedkey keys must be quoted"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/3.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test extra comma"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/4.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test double extra comma"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/5.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test missing value"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/6.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test comma after the close"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/7.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test extra close"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/8.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test extra comma after value"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/9.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test extra value after close with misplaced quotes"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/10.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should throw error");
};

exports["test illegal expression addition"] = function () {
  var json = fs.readFileSync(__dirname + "/fails/11.json").toString();
  assert["throws"](function () {parser.parse(json)}, "should 