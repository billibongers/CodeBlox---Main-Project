// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var construct, Expression, Node, ThrowStatement;
  Node = require('../node');
  Expression = require('../classes/Expression');
  construct = require('../combinators').construct;
  ThrowStatement = function (super$) {
    extends$(ThrowStatement, super$);
    ThrowStatement.prototype.type = ThrowStatement.name;
    function ThrowStatement(depth, ancestors) {
      --depth;
      ancestors = [this].concat(ancestors);
      this.argument = Expression(depth, ancestors);
    }
    return ThrowStatement;
  }(Node);
  module.exports = construct(ThrowStatement);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
