// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, construct, Expression, ForStatement, maybe, Node, oneOf, Statement, VariableDeclaration;
  Node = require('../node');
  Expression = require('../classes/Expression');
  Statement = require('../classes/Statement');
  VariableDeclaration = require('./VariableDeclaration');
  cache$ = require('../combinators');
  construct = cache$.construct;
  oneOf = cache$.oneOf;
  maybe = cache$.maybe;
  ForStatement = function (super$) {
    extends$(ForStatement, super$);
    ForStatement.prototype.type = ForStatement.name;
    function ForStatement(depth, ancestors) {
      --depth;
      ancestors = [this].concat(ancestors);
      this.init = maybe(oneOf([
        VariableDeclaration,
        Expression
      ]))(depth, ancestors);
      this.test = maybe(Expression)(depth, ancestors);
      this.update = maybe(Expression)(depth, ancestors);
      this.body = Statement(depth, ancestors);
    }
    return ForStatement;
  }(Node);
  module.exports = construct(ForStatement);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
