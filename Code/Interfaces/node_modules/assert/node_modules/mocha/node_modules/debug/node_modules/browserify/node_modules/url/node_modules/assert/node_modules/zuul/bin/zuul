#!/usr/bin/env node
require('superstack');

var path = require('path');
var fs = require('fs');

var program = require('commander');
var yaml = require('yamljs');
var xtend = require('xtend');
var osenv = require('osenv');

var zuul = require('../lib/zuul');

program
.usage('[options] <files | dir>')
.option('--ui <testing ui>', 'ui for tests (mocha-bdd, mocha-tdd, qunit, tape)')
.option('--local [port]', 'port for manual testing in a local browser')
.option('--tunnel', 'establish a tunnel for outside acceess. only used when --local is specified')
.parse(process.argv);

var config = {
    files: program.args,
    local: program.local,
    ui: program.ui,
    tunnel: program.tunnel
};

var cfg_file = path.join(process.cwd(), '.zuul.yml');
if (fs.existsSync(cfg_file)) {
    var zuulyml = yaml.parse(fs.readFileSync(cfg_file, 'utf-8'));
    config = xtend(config, zuulyml);
}

// optinal additional config from $HOME/.zuulrc
var home_config = path.join(osenv.home(), '.zuulrc');
if (fs.existsSync(home_config)) {
    var zuulrc = yaml.parse(fs.readFileSync(home_config, 'utf-8'));
    config = xtend(zuulrc, config);
}

var sauce_username = process.env.SAUCE_USERNAME;
var sauce_key = process.env.SAUCE_ACCESS_KEY;

config.username = sauce_username || config.sauce_username;
config.key = sauce_key || config.sauce_key;

var pkg = {};
try {
    pkg = require(process.cwd() + '/package.json');
} catch (err) {}

config.name = config.name || pkg.name || 'there is only zuul';

zuul(config);

// vim: ft=javascript
