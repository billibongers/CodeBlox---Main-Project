Hashish
=======

Hashish is a node.js library for manipulating hash data structures.
It is distilled from the finest that ruby, perl, and haskell have to offer by
way of hash/map interfaces.

Hashish provides a chaining interface, where you can do:

    var Hash = require('hashish');
    
    Hash({ a : 1, b : 2, c : 3, d : 4 })
        .map(function (x) { return x * 10 })
        .filter(function (x) { return x < 30 })
        .forEach(function (x, key) {
            console.log(key + ' => ' + x);
        })
    ;
    
Output:

    a => 10
    b => 20

Some functions and attributes in the chaining interface are terminal, like
`.items` or `.detect()`. They return values of their own instead of the chain
context.

Each function in the chainable interface is also attached to `Hash` in chainless
form:

    var Hash = require('hashish');
    var obj = { a : 1, b : 2, c : 3, d : 4 };
    
    var mapped = Hash.map(obj, function (x) {
        return x * 10
    });
    
    console.dir(mapped);

Output:

    { a: 10, b: 20, c: 30, d: 40 }

In either case, the 'this' context of the function calls is the same object that
the chained functions return, so you can make nested chains.

Methods
=======

forEach(cb)
-----------

For each key/value in the hash, calls `cb(value, key)`.

map(cb)
-------

For each key/value in the hash, calls `cb(value, key)`.
The return value of `cb` is the new value at `key` in the resulting hash.

filter(cb)
----------

For each key/value in the hash, calls `cb(value, key)`.
The resulting hash