// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var BlockStatement, cache$, construct, listOf, Node, Statement;
  Node = require('../node');
  Statement = require('../classes/Statement');
  cache$ = require('../combinators');
  construct = cache$.construct;
  listOf = cache$.listOf;
  BlockStatement = function (super$) {
    extends$(BlockStatement, super$);
    BlockStatement.prototype.type = BlockStatement.name;
    BlockStatement.prototype.body = [];
    function BlockStatement(depth, ancestors) {
      --depth;
      if (depth > 0) {
        ancestors = [this].concat(ancestors);
        this.body = listOf([Statement])(depth, ancestors);
      }
    }
    return BlockStatement;
  }(Node);
  module.exports = construct(BlockStatement);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
