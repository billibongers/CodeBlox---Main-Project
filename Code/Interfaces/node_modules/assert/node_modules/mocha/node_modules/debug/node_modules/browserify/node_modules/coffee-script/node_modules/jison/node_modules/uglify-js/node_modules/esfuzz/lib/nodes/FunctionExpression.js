// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var BlockStatement, cache$, construct, FunctionExpression, Identifier, listOf, maybe, Node, Pattern;
  Node = require('../node');
  Pattern = require('../classes/Pattern');
  BlockStatement = require('./BlockStatement');
  Identifier = require('./Identifier');
  cache$ = require('../combinators');
  construct = cache$.construct;
  listOf = cache$.listOf;
  maybe = cache$.maybe;
  FunctionExpression = function (super$) {
    extends$(FunctionExpression, super$);
    FunctionExpression.prototype.type = FunctionExpression.name;
    FunctionExpression.prototype.defaults = [];
    FunctionExpression.prototype.rest = null;
    FunctionExpression.prototype.generator = false;
    FunctionExpression.prototype.expression = false;
    function FunctionExpression(depth, ancestors) {
      --depth;
      ancestors = [this].concat(ancestors);
      this.id = maybe(Identifier)(depth, ancestors);
      this.params = listOf([Pattern])(depth, ancestors);
      this.body = BlockStatement(depth, ancestors);
    }
    return FunctionExpression;
  }(Node);
  module.exports = construct(FunctionExpression);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
