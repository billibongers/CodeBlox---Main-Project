{
  "author": {
    "name": "fish",
    "email": "zhengxinlin@gmail.com",
    "url": "https://github.com/fishbar"
  },
  "name": "xfs",
  "description": "extends fs module, easy way to manipulate file system, support both sync functions and async functions",
  "version": "0.2.1",
  "homepage": "https://github.com/fishbar/xfs",
  "repository": {
    "type": "git",
    "url": "git://github.com/fishbar/xfs.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha -r jscoverage test"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {},
  "devDependencies": {
    "jscoverage": "*",
    "mocha": "*",
    "expect.js": "*"
  },
  "optionalDependencies": {},
  "readme": "xfs\n======\n\nxfs is a module extends builded-in fs module, let file manipulate easily\n\n[![Build Status](https://secure.travis-ci.org/fishbar/xfs.png)](http://travis-ci.org/fishbar/xfs)\n\n\nxfs extends the following functions :\n\n## async functions\n  * mkdir(path,cb) make directories and their contents recursively\n  * rmdir(path,cb) remove directories and their contents recursively\n  * rename(src,dest,cb) rename file across two different devices\n  * walk(dir, expr, each, done); walk through dir, each file will pass to each() , when walk done, done() called\n\n```js\n// walk traverse through files in the dir one by one\n// get only js files in dir\nfs.walk(dir, /\\.js$/, function (err, file, done) {\n  // your code here\n\n  // in the end , must call done()\n  done();\n}, function (err) {\n  // your code\n});\n\n// function walk() can also accept an `function type` expr\nfs.walk(dir, function (fpath) {\n  // return bool, true means accept, false means ignore\n  return true\n}, function (err, file, done) {\n\n}, function (err) {\n\n});\n\n// or you can save the done function\n\nfs.walk(dir, /\\.js$/, function (err, file){\n  // your code here\n});\n```\n\n## sync functions\n\n  * rm(path)\n  * mkdir(path)\n  * save(path, data[, options|encoding])\n  \n```js\nvar sync = xfs.sync();\n// shell > rm -r path\nsync.rm(path);\n// shell > mkdir -p path\nsync.mkdir(path);\n// save file auto create dir if not exist\n// node >= v0.10.0\nsync.save(path, data, option); // when node >= v0.10.0, the last param is option\nsync.save(path, data, encoding); // when node < v0.10.0, the last param is encoding\n\n```\n  ... to be contine\n\n## symlink file, rm will failed\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fishbar/xfs/issues"
  },
  "_id": "xfs@0.2.1",
  "_from": "xfs@*"
}
