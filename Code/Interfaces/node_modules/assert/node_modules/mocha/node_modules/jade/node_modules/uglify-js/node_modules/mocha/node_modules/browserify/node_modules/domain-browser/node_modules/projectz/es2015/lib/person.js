'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* @flow */
var Fellow = require('fellow/es2015');

// Define

var Person = function (_Fellow) {
	_inherits(Person, _Fellow);

	function Person() {
		_classCallCheck(this, Person);

		return _possibleConstructorReturn(this, Object.getPrototypeOf(Person).apply(this, arguments));
	}

	_createClass(Person, [{
		key: 'name',

		/* :: _years:?string; */
		/* :: _name:?string; */
		/* :: githubUsername:string; */
		/* :: twitterUsername:string; */
		/* :: facebookUsername:string; */

		/**
  The years that this fellow has
  @property years
  @type String
  */

		/**
  If the name is empty, we will try to fallback to githubUsername then twitterUsername
  If the name is prefixed with a series of numbers, that is considered the year
  E.g. In `2015+ Bevry Pty Ltd` then `2015+` is the years
  E.g. In `2013-2015 Bevry Pty Ltd` then `2013-2015` is the years
  @property name
  @type String
  */
		/* eslint no-magic-numbers: 0 */
		set: function set(value /* :string */) {
			var match = /^((?:[0-9]+[\-\+]?)+)?(.+)$/.exec(value);
			if (match) {
				var years = String(match[1] || '').trim() || null;
				var name = match[2].trim() || null;
				if (years) {
					this.years = years;
				}
				this._name = name;
			}
		},
		get: function get() /* :any */{
			return this._name || this.githubUsername || this.twitterUsername || this.facebookUsername || null;
		}
	}]);

	return Person;
}(Fellow);

// Exports


module.exports = Person;