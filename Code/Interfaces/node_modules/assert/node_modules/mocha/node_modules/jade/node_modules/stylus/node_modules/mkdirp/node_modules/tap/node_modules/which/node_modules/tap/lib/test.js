module.exports = Test

var Readable = require('stream').Readable
/* istanbul ignore if */
if (!Readable || process.version.match(/^v0\.10/)) {
  Readable = require('readable-stream').Readable
}

var Promise = require('bluebird')

function Deferred () {
  this.resolve = null
  this.reject = null
  this.promise = new Promise(function (resolve, reject) {
    this.reject = reject
    this.resolve = resolve
  }.bind(this))
}

var util = require('util')
util.inherits(Test, Readable)

// A sigil object for implicit end() calls that should not
// trigger an error if the user then calls t.end()
var IMPLICIT = {}

var yaml = require('js-yaml')
var stack = require('./stack.js')
var tapAsserts = require('./assert.js')
var assert = require('assert')
var spawn = require('child_process').spawn
var Parser = require('tap-parser')
var path = require('path')
var Module = require('module').Module
var fs = require('fs')
var cleanYamlObject = require('clean-yaml-object')
var binpath = path.resolve(__dirname, '../bin')

function hasOwn (obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

function Test (options) {
  options = options || {}

  if (!(this instanceof Test)) {
    return new Test(options)
  }

  this.assertStack = null
  this.assertAt = null

  this._deferred = null
  this._autoend = !!options.autoend
  this._name = options.name || '(unnamed test)'
  this._ok = true
  this._pass = 0
  this._fail = 0
  this._skip = 0
  this._todo = 0
  this._count = 0
  this._bailedOut = false
  this._endEmitted = false
  this._explicitEnded = false
  this._multiEndThrew = false
  this._ranAfterEach = false

  if (Object.prototype.hasOwnProperty.call(options, 'bail')) {
    this._bail = !!options.bail
  } else {
    this._bail = process.env.TAP_BAIL === '1'
  }

  this._passes = []
  this._fails = []
  this._skips = []
  this._todos = []

  this._beforeEach = []
  this._afterEach = []

  this._plan = -1
  this._queue = []
  this._currentChild = null
  this._ending = false
  this._ended = false
  this._mustDeferEnd = false
  this._deferredEnd = null

  this._parent = null
  this._printedVersion = false

  this._startTime = process.hrtime()
  this._calledAt = options.at || stack.at(this.test)
  if (!this._calledAt || !this._calledAt.file) {
    this._calledAt = stack.at(Test)
  }

  this._timer = null
  this._timeout = 0
  if (options.timeout !== Infinity &&
    !isNaN(options.timeout) &&
    options.timeout > 0) {
    this.setTimeout(options.timeout)
  }

  Readable.apply(this, options)

  // Bind all methods.
  var bound = {