{
  "name": "xo",
  "version": "0.16.0",
  "description": "JavaScript happiness style linter ❤️",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/xo"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "maintainers": [
    {
      "name": "James Talmage",
      "email": "james@talmage.io",
      "url": "github.com/jamestalmage"
    }
  ],
  "bin": {
    "xo": "cli.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "xo && nyc ava",
    "coveralls": "nyc report --reporter=text-lcov | coveralls"
  },
  "files": [
    "index.js",
    "cli.js",
    "options-manager.js",
    "config"
  ],
  "keywords": [
    "❤️",
    "cli-app",
    "cli",
    "xo",
    "xoxo",
    "hugs",
    "kisses",
    "happy",
    "happiness",
    "code",
    "quality",
    "style",
    "lint",
    "linter",
    "jscs",
    "jshint",
    "jslint",
    "eslint",
    "validate",
    "code style",
    "standard",
    "strict",
    "check",
    "checker",
    "verify",
    "enforce",
    "hint",
    "simple"
  ],
  "dependencies": {
    "arrify": "^1.0.0",
    "babel-eslint": "^6.0.0",
    "debug": "^2.2.0",
    "deep-assign": "^1.0.0",
    "eslint": "^2.12.0",
    "eslint-config-xo": "^0.15.0",
    "eslint-formatter-pretty": "^0.2.1",
    "eslint-plugin-ava": "^2.0.0",
    "eslint-plugin-babel": "^3.1.0",
    "eslint-plugin-import": "^1.7.0",
    "eslint-plugin-no-use-extend-native": "^0.3.2",
    "eslint-plugin-promise": "^1.1.0",
    "eslint-plugin-xo": "^0.5.0",
    "get-stdin": "^5.0.0",
    "globby": "^5.0.0",
    "has-flag": "^2.0.0",
    "home-or-tmp": "^2.0.0",
    "meow": "^3.4.2",
    "multimatch": "^2.1.0",
    "object-assign": "^4.0.1",
    "path-exists": "^2.1.0",
    "pkg-conf": "^1.0.1",
    "resolve-cwd": "^1.0.0",
    "resolve-from": "^2.0.0",
    "update-notifier": "^1.0.0",
    "xo-init": "^0.3.0"
  },
  "devDependencies": {
    "ava": "*",
    "coveralls": "^2.11.9",
    "eslint-config-xo-react": "^0.7.0",
    "eslint-plugin-react": "^5.0.1",
    "execa": "^0.4.0",
    "nyc": "^6.1.1",
    "proxyquire": "^1.7.3",
    "temp-write": "^2.0.1",
    "xo": "file:."
  },
  "readme": "<h1 align=\"center\">\n\t<br>\n\t<img width=\"400\" src=\"https://cdn.rawgit.com/sindresorhus/xo/5d23bf1e280f574579825dc1a29ed22c69790acf/media/logo.svg\" alt=\"XO\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> JavaScript happiness style linter ❤️\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/xo.svg?branch=master)](https://travis-ci.org/sindresorhus/xo) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/mydb56kve054n2h5/branch/master?svg=true)](https://ci.appveyor.com/project/sindresorhus/xo/branch/master) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/xo/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/xo?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\nEnforce strict code style. Never discuss code style on a pull request again!\n\nNo decision-making. No `.eslintrc` or `.jshintrc` to manage. It just works!\n\nUses [ESLint](http://eslint.org) underneath, so issues regarding rules should be opened over [there](https://github.com/eslint/eslint/issues).\n\nJSX is supported by default, but you'll need [eslint-config-xo-react](https://github.com/sindresorhus/eslint-config-xo-react#use-with-xo) for React specific linting.\n\n\n## Install\n\n```\n$ npm install --global xo\n```\n\n\n## Usage\n\n```\n$ xo --help\n\n  Usage\n    $ xo [<file|glob> ...]\n\n  Options\n    --init          Add XO to your project\n    --fix           Automagically fix issues\n    --reporter      Reporter to use\n    --stdin         Validate code from stdin\n    --esnext        Enforce ES2015+ rules\n    --env           Environment preset  [Can be set multiple times]\n    --global        Global variable  [Can be set multiple times]\n    --ignore        Additional paths to ignore  [Can be set multiple times]\n    --space         Use space indent instead of tabs  [Default: 2]\n    --no-semicolon  Prevent use of semicolons\n    --plugin        Include third-party plugins  [Can be set multiple times]\n    --extend        Extend defaults with a custom config  [Can be set multiple times]\n    --open          Open files with issues in your editor\n\n  Examples\n    $ xo\n    $ xo index.js\n    $ xo *.js !foo.js\n    $ xo --esnext --space\n    $ xo --env=node --env=mocha\n    $ xo --init --esnext\n    $ xo --plugin=react\n\n  Tips\n    Put options in package.json instead of using flags so other tools can read it.\n```\n\n*Note that the CLI will use your local install of XO when available, even when run globally.*\n\n\n## Default code style\n\n*Any of these can be [overridden](#rules) if necessary.*\n\n- Tab indentation *[(or space)](#space)*\n- Semicolons\n- Single-quotes\n- No unused variables\n- Space after keyword `if (condition) {}`\n- Always `===` instead of `==`\n\nCheck out an [example](index.js) and the [ESLint rules](https://github.com/sindresorhus/eslint-config-xo/blob/master/index.js).\n\n\n## Workflow\n\nThe recommended workflow is to add XO locally to your project and run it with the tests.\n\nSimply run `$ xo --init` (with any options) to add XO to your package.json or create one.\n\n### Before\n\n```json\n{\n  \"name\": \"awesome-package\",\n  \"scripts\": {\n    \"test\": \"ava\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.11.0\"\n  }\n}\n```\n\n### After\n\n```json\n{\n  \"name\": \"awesome-package\",\n  \"scripts\": {\n    \"test\": \"xo && ava\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.11.0\",\n    \"xo\": \"^0.12.0\"\n  }\n}\n```\n\nThen just run `$ npm test` and XO will be run before your tests.\n\n\n## Config\n\nYou can configure some options in XO by putting it in package.json:\n\n```json\n{\n  \"name\": \"awesome-package\",\n  \"xo\": {\n    \"esnext\": true\n  }\n}\n```\n\n[Globals](http://eslint.org/docs/user-guide/configuring#specifying-globals) and [rules](http://eslint.org/docs/user-guide/configuring#configuring-rules) can be configured inline in files.\n\n### esnext\n\nType: `boolean`<br>\nDefault: `false`\n\nEnforce ES2015+ rules. Enabling this will *prefer* ES2015+ syntax and conventions.\n\n*ES2015+ is parsed even without this option. You can already use ES2016 features like [`async`/`await`](https://github.com/lukehoban/ecmascript-asyncawait) and [decorators](https://github.com/wycats/javascript-decorators). For a full list of features see [Babel's experimental features](https://babeljs.io/docs/usage/experimental/) and their [Learn ES2015](https://babeljs.io/docs/learn-es2015/).*\n\n### envs\n\nType: `array`<br>\nDefault: `['node']`\n\nWhich [environments](http://eslint.org/docs/user-guide/configuring#specifying-environments) your code is designed to run in. Each environment brings with it a certain set of predefined global variables.\n\n### globals\n\nType: `array`\n\nAdditional global variables your code accesses during execution.\n\n### ignores\n\nType: `array`\n\nSome [paths](https://github.com/sindresorhus/xo/blob/master/options-manager.js) are ignored by default. Additional ignores can be added here.\n\n### space\n\nType: `boolean`, `number`<br>\nDefault: `false` *(tab indentation)*\n\nSet it to `true` to get 2-space indentation or specify the number of spaces.\n\nThis option exists for pragmatic reasons, but I would strongly recommend you read [\"Why tabs are superior\"](http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/).\n\n### rules\n\nType: `object`\n\nOverride any of the [default rules](https://github.com/sindresorhus/eslint-config-xo/blob/master/index.js). See the [ESLint docs](http://eslint.org/docs/rules/) for more info on each rule.\n\nPlease take a moment to consider if you really need to use this option.\n\n### semicolon\n\nType: `boolean`<br>\nDefault: `true` *(semicolons required)*\n\nSet it to `false` to enforce no-semicolon style.\n\n### plugins\n\nType: `array`\n\nInclude third-party [plugins](http://eslint.org/docs/user-guide/configuring.html#configuring-plugins).\n\n### extends\n\nType: `array`, `string`\n\nUse one or more [shareable configs](http://eslint.org/docs/developer-guide/shareable-configs.html) to override any of the default rules (like `rules` above).\n\n\n## Config Overrides\n\nXO makes it easy to override configs for specific files. The `overrides` property must be an array of override objects. Each override object must contain a `files` property which is a glob string, or an array of glob strings. The remaining properties are identical to those described above, and will override the settings of the base config. If multiple override configs match the same file, each matching override is applied in the order it appears in the array. This means the last override in the array takes precedence over earlier ones. Consider the following example:\n\n```json\n{\n  \"xo\": {\n    \"semicolon\": false,\n    \"space\": 2,\n    \"overrides\": [\n      {\n        \"files\": \"test/*.js\",\n        \"esnext\": true,\n        \"space\": 3\n      },\n      {\n         \"files\": \"test/foo.js\",\n         \"esnext\": false\n      }\n    ]\n  }\n}\n```\n\n- The base configuration is simply `space: 2`, `semicolon: false`. These settings are used for every file unless otherwise noted below.\n\n- For every file in `test/*.js`, the base config is used, but `space` is overridden with `3`, and the `esnext` option is set to `true`. The resulting config is:\n\n```json\n{\n  \"esnext\": true,\n  \"semicolon\": false,\n  \"space\": 3\n}\n```\n\n- For `test/foo.js`, the base config is first applied, followed the first overrides config (its glob pattern also matches `test/foo.js`), finally the second override config is applied. The resulting config is:\n\n```json\n{\n  \"esnext\": false,\n  \"semicolon\": false,\n  \"space\": 3\n}\n```\n\n\n## FAQ\n\n#### What does XO mean?\n\nIt means [hugs and kisses](https://en.wiktionary.org/wiki/xoxo).\n\n#### Why not Standard?\n\nThe [Standard style](http://standardjs.com) is a really cool idea. I too wish we could have one style to rule them all! But the reality is that the JS community is just too diverse and opinionated to create *one* code style. They also made the mistake of pushing their own style instead of the most popular one. In contrast, XO is more pragmatic and has no aspiration of being *the* style. My goal with XO is to make it simple to enforce consistent code style with close to no config. XO comes with my code style preference by default, as I mainly made it for myself, but everything is configurable.\n\n#### Why not ESLint?\n\nXO is based on ESLint. This project started out as just a shareable ESLint config, but it quickly grew out of that. I wanted something even simpler. Just typing `xo` and be done. No decision-making. No config. I also have some exciting future plans for it. However, you can still get most of the XO benefits while using ESLint directly with the [ESLint shareable config](https://github.com/sindresorhus/eslint-config-xo).\n\n\n## Editor plugins\n\n- [Sublime Text](https://github.com/sindresorhus/SublimeLinter-contrib-xo)\n- [Atom](https://github.com/sindresorhus/atom-linter-xo)\n- [TextMate 2](https://github.com/claylo/XO.tmbundle)\n- [VSCode](https://github.com/SamVerschueren/vscode-linter-xo)\n- [Emacs](https://github.com/j-em/xo-emacs)\n\n#### Vim\n\nYou can use [Syntastic](https://github.com/scrooloose/syntastic)'s ESLint checker with the following settings in your `.vimrc` file:\n\n```vim\nlet g:syntastic_javascript_eslint_generic = 1\nlet g:syntastic_javascript_eslint_exec = 'xo'\nlet g:syntastic_javascript_eslint_args = '--reporter=compact'\nlet g:syntastic_javascript_checkers = ['eslint']\n```\n\n\n## Build-system plugins\n\n- [Gulp](https://github.com/sindresorhus/gulp-xo)\n- [Grunt](https://github.com/sindresorhus/grunt-xo)\n- [webpack](https://github.com/Semigradsky/xo-loader)\n- [Metalsmith](https://github.com/blainsmith/metalsmith-xo)\n- [Fly](https://github.com/lukeed/fly-xo)\n\n\n## Configs\n\n- [eslint-config-xo](https://github.com/sindresorhus/eslint-config-xo) - ESLint shareable config for XO\n- [eslint-config-xo-space](https://github.com/sindresorhus/eslint-config-xo-space) - ESLint shareable config for XO with 2-space indent\n- [eslint-config-xo-react](https://github.com/sindresorhus/eslint-config-xo-react) - ESLint shareable config for React to be used with the above\n\n\n## Related\n\n- [eslint-plugin-xo](https://github.com/sindresorhus/eslint-plugin-xo) - Additional ESLint rules *(Bundled in XO)*\n\n\n## Badge\n\nShow the world you're using XO → [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\n```md\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n```\n\n\n## Team\n\n[![Sindre Sorhus](https://avatars.githubusercontent.com/u/170270?s=130)](https://sindresorhus.com) | [![James Talmage](https://avatars.githubusercontent.com/u/4082216?s=130)](https://github.com/jamestalmage)\n---|---\n[Sindre Sorhus](https://sindresorhus.com) | [James Talmage](https://github.com/jamestalmage)\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sindresorhus/xo/issues"
  },
  "_id": "xo@0.16.0",
  "_from": "xo@*"
}
