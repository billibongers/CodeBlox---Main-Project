'use strict';

/* @flow */
// Projectz CLI

// Import caterpillar [Caterpillar](https://github.com/bevry/caterpillar) for logging

var _require = require('caterpillar');

var Logger = _require.Logger;

var Filter = require('caterpillar-filter');
var Human = require('caterpillar-human');

// Import [Commander](https://github.com/visionmedia/commander.js/) for command and option parsing
var cli = require('commander');

// Import our package data for versioning

var _require2 = require('../package.json');

var version = _require2.version;

// Import out projectz utility

var _require3 = require('./index.js');

var Projectz = _require3.Projectz;

// Prepare our logging configuration

var LOG_LEVEL_INFO = 6;
var LOG_LEVEL_DEBUG = 7;
var EXIT_ERROR_CODE = 1;
var level = process.argv.indexOf('-d') === -1 ? LOG_LEVEL_INFO : LOG_LEVEL_DEBUG;

// Setup our logging
var logger = new Logger({ level: level });
var filter = new Filter();
var human = new Human();

// Pipe logger output to filter, then filter output to stdout
logger.pipe(filter).pipe(human).pipe(process.stdout);

// Extract out version out of our package and apply it to commander
cli.version(version);

// Add our cwd customisation
cli.option('-p, --path [value]', 'Path to the project that you wish to work with, defaults to the current working directory');
cli.option('-d', 'Outputs verbose logging.');

// Add the compile command that will create a new projectz instance and compile the project
cli.command('compile').description('Compile our project').action(function () {
	// Create our new project and use our caterpillar logger instance for the logging
	logger.log('info', 'Initialising project');
	var project = Projectz.create({
		log: logger.log.bind(logger),
		cwd: cli.path || null
	});
	logger.log('info', 'Initialised project');

	// Load the the files for the new project
	logger.log('info', 'Loading changes');
	project.load(function (err) {
		if (err) {
			logger.log('err', err.stack);
			process.exit(EXIT_ERROR_CODE);
		}
		logger.log('info', 'Loaded changes');

		// And apply the changes
		project.save(function (err) {
			if (err) {
				logger.log('err', err.stack);
				process.exit(EXIT_ERROR_CODE);
			}
			logger.log('info', 'Completed successfully');
		});
	});
});

// Start the commands
cli.parse(process.argv);