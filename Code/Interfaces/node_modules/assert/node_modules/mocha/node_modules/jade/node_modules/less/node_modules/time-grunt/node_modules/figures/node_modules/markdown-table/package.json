{
  "name": "markdown-table",
  "version": "0.4.0",
  "description": "Markdown/ASCII tables",
  "license": "MIT",
  "keywords": [
    "text",
    "markdown",
    "table",
    "align",
    "ascii",
    "rows",
    "tabular"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/wooorm/markdown-table.git"
  },
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com"
  },
  "devDependencies": {
    "chalk": "^1.0.0",
    "eslint": "^0.18.0",
    "istanbul": "^0.3.0",
    "jscs": "^1.0.0",
    "jscs-jsdoc": "^0.4.0",
    "mocha": "^2.0.0"
  },
  "scripts": {
    "test-api": "_mocha --check-leaks test.js",
    "test-coveralls": "istanbul cover _mocha --report lcovonly -- --check-leaks test.js",
    "test-coverage": "istanbul cover _mocha -- -- test.js",
    "test-travis": "npm run test-coveralls",
    "test": "npm run test-api",
    "lint-api": "eslint index.js",
    "lint-test": "eslint --env mocha test.js",
    "lint-style": "jscs --reporter inline index.js test.js",
    "lint": "npm run lint-api && npm run lint-test && npm run lint-style",
    "make": "npm run lint && npm run test-coverage"
  },
  "readme": "# markdown-table [![Build Status](https://img.shields.io/travis/wooorm/markdown-table.svg?style=flat)](https://travis-ci.org/wooorm/markdown-table) [![Coverage Status](https://img.shields.io/coveralls/wooorm/markdown-table.svg?style=flat)](https://coveralls.io/r/wooorm/markdown-table?branch=master)\n\nGenerate fancy [Markdown](https://help.github.com/articles/github-flavored-markdown/#tables)/ASCII tables.\n\n## Installation\n\n[npm](https://docs.npmjs.com/cli/install):\n\n```bash\n$ npm install markdown-table\n```\n\n[Component.js](https://github.com/componentjs/component):\n\n```bash\n$ component install wooorm/markdown-table\n```\n\n[Bower](http://bower.io/#install-packages):\n\n```bash\n$ bower install markdown-table\n```\n\n[Duo](http://duojs.org/#getting-started):\n\n```javascript\nvar table = require('wooorm/markdown-table');\n```\n\n## Usage\n\n```javascript\nvar table = require('markdown-table');\n\n/**\n * Normal usage (defaults to left-alignment):\n */\n\ntable([\n    ['Branch', 'Commit'],\n    ['master', '0123456789abcdef'],\n    ['staging', 'fedcba9876543210']\n]);\n/*\n * | Branch  | Commit           |\n * | ------- | ---------------- |\n * | master  | 0123456789abcdef |\n * | staging | fedcba9876543210 |\n */\n\n/**\n * With alignment:\n */\n\ntable([\n    ['Beep', 'No.', 'Boop'],\n    ['beep', '1024', 'xyz'],\n    ['boop', '3388450', 'tuv'],\n    ['foo', '10106', 'qrstuv'],\n    ['bar', '45', 'lmno']\n], {\n    'align': ['l', 'c', 'r']\n});\n/*\n * | Beep |   No.   |   Boop |\n * | :--- | :-----: | -----: |\n * | beep |   1024  |    xyz |\n * | boop | 3388450 |    tuv |\n * | foo  |  10106  | qrstuv |\n * | bar  |    45   |   lmno |\n */\n\n/**\n * Alignment on dots:\n */\n\ntable([\n    ['No.'],\n    ['0.1.2'],\n    ['11.22.33'],\n    ['5.6.'],\n    ['1.22222'],\n], {\n    'align': '.'\n});\n/*\n * |    No.      |\n * | :---------: |\n * |   0.1.2     |\n * | 11.22.33    |\n * |   5.6.      |\n * |     1.22222 |\n */\n```\n\n## API\n\n### markdownTable(table, options?)\n\nTurns a given matrix of strings (an array of arrays of strings) into a table.\n\nThe following options are available:\n\n- `options.align`  — String or array of strings, the strings being either `\"l\"` (left), `\"r\"` (right), `c` (center), or `.` (dot). Other values are treated as `\"\"`, which doesn’t place the colon but does left align. _Only the lowercased first character is used, so `Right` is fine_;\n- `options.delimiter` — Value to insert between cells. Carefull, non-pipe values will break GitHub Flavored Markdown;\n- `options.start` — Value to insert at the beginning of every row.\n- `options.end` — Value to insert at the end of every row.\n- `options.rule` — Whether to display a rule between the header and the body of the table. Carefull, will break GitHub Flavored Markdown when `false`;\n- `options.stringLength` — The method to detect the length of a cell (see below).\n\n### options.stringLength(cell)\n\nANSI-sequences mess up tables on terminals. To fix this, you have to pass in a `stringLength` option to detect the “visible” length of a cell.\n\n```javascript\nvar chalk = require('chalk');\n\nfunction stringLength(cell) {\n    return chalk.stripColor(cell).length;\n}\n```\n\nSee the [tests for an example](test.js#L368-L375).\n\n## Inspiration\n\nThe original idea and basic implementation was inspired by James Halliday's [text-table](https://github.com/substack/text-table) library.\n\n## License\n\n[MIT](LICENSE) © [Titus Wormer](http://wooorm.com)\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/wooorm/markdown-table/issues"
  },
  "_id": "markdown-table@0.4.0",
  "dist": {
    "shasum": "2021a345b2290409dbac2d97304b65361a9736bc"
  },
  "_from": "markdown-table@^0.4.0",
  "_resolved": "https://registry.npmjs.org/markdown-table/-/markdown-table-0.4.0.tgz"
}
